// --- Auto Generated By CodeGen Module ---
package com.hp.joininmemory.example.domain.orderitem.service.impl;

import cn.hutool.core.util.RandomUtil;
import com.google.common.collect.Lists;
import com.hp.common.base.enums.CodeEnum;
import com.hp.common.base.exception.BusinessException;
import com.hp.common.base.model.PageRequestWrapper;
import com.hp.joininmemory.example.domain.orderitem.OrderItem;
import com.hp.joininmemory.example.domain.orderitem.mapper.OrderItemMapper;
import com.hp.joininmemory.example.domain.orderitem.repository.OrderItemRepository;
import com.hp.joininmemory.example.domain.orderitem.request.OrderItemDTO;
import com.hp.joininmemory.example.domain.orderitem.response.OrderItemVO;
import com.hp.joininmemory.example.domain.orderitem.service.IOrderItemService;
import com.hp.jpa.EntityOperations;
import com.querydsl.core.BooleanBuilder;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class OrderItemServiceImpl implements IOrderItemService {
    private final OrderItemRepository orderItemRepository;

    @Transactional(
            rollbackFor = Exception.class
    )
    @Override
    public Long createOrderItem(OrderItemDTO creator) {
        Optional<OrderItem> orderItem = EntityOperations.doCreate(orderItemRepository)
                .create(() -> OrderItemMapper.INSTANCE.dtoToEntity(creator))
                .update(OrderItem::init)
                .execute();
        return orderItem.map(OrderItem::getId).orElse(null);
    }

    @Transactional(
            rollbackFor = Exception.class
    )
    @Override
    public void updateOrderItem(OrderItemDTO updater) {
        EntityOperations.doUpdate(orderItemRepository)
                .loadById(updater.getId())
                .update(updater::updateOrderItem)
                .execute();
    }

    @Transactional(
            rollbackFor = Exception.class
    )
    @Override
    public void validOrderItem(Long id) {
        EntityOperations.doUpdate(orderItemRepository)
                .loadById(id)
                .update(OrderItem::valid)
                .execute();
    }

    @Transactional(
            rollbackFor = Exception.class
    )
    @Override
    public void invalidOrderItem(Long id) {
        EntityOperations.doUpdate(orderItemRepository)
                .loadById(id)
                .update(OrderItem::invalid)
                .execute();
    }

    @Override
    public OrderItemVO findById(Long id) {
        Optional<OrderItem> orderItem = orderItemRepository.findById(id);
        return new OrderItemVO(orderItem.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
    }

    @Override
    public Page<OrderItemVO> findByPage(PageRequestWrapper<OrderItemDTO> query) {
        BooleanBuilder booleanBuilder = new BooleanBuilder();
        Page<OrderItem> page = orderItemRepository.findAll(booleanBuilder,
                PageRequest.of(query.getPage() - 1, query.getPageSize(), Sort.by(
                        Sort.Direction.DESC, "createdAt")));
        return new PageImpl<>(page.getContent().stream().map(OrderItemVO::new)
                .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
    }

    @Override
    public List<OrderItemVO> findAllByOrderIds(List<Long> orderIds) {
        return orderIds.stream()
                .map(this::findAllByOrderId)
                .flatMap(Collection::stream)
                .collect(Collectors.toList());
    }

    private List<OrderItemVO> findAllByOrderId(Long orderId) {
        final OrderItem dummy1 = new OrderItem();
        dummy1.setId(RandomUtil.randomLong(0L, Long.MAX_VALUE));
        dummy1.setOrderId(orderId);
        dummy1.valid();

        final OrderItem dummy2 = new OrderItem();
        dummy2.setId(RandomUtil.randomLong(0L, Long.MAX_VALUE));
        dummy2.setOrderId(orderId);
        dummy2.valid();

        return Lists.newArrayList(new OrderItemVO(dummy1), new OrderItemVO(dummy2));
    }
}
