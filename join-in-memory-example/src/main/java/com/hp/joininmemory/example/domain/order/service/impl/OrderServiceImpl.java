// --- Auto Generated By CodeGen Module ---
package com.hp.joininmemory.example.domain.order.service.impl;

import cn.hutool.core.util.RandomUtil;
import com.google.common.collect.Lists;
import com.hp.common.base.enums.CodeEnum;
import com.hp.common.base.exception.BusinessException;
import com.hp.joininmemory.example.domain.order.Order;
import com.hp.joininmemory.example.domain.order.mapper.OrderMapper;
import com.hp.joininmemory.example.domain.order.repository.OrderRepository;
import com.hp.joininmemory.example.domain.order.request.OrderDTO;
import com.hp.joininmemory.example.domain.order.response.OrderVO;
import com.hp.joininmemory.example.domain.order.service.IOrderService;
import com.hp.jpa.EntityOperations;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class OrderServiceImpl implements IOrderService {
    private final OrderRepository orderRepository;

    @Transactional(
            rollbackFor = Exception.class
    )
    @Override
    public Long createOrder(OrderDTO creator) {
        Optional<Order> order = EntityOperations.doCreate(orderRepository)
                .create(() -> OrderMapper.INSTANCE.dtoToEntity(creator))
                .update(Order::init)
                .execute();
        return order.map(Order::getId).orElse(null);
    }

    @Transactional(
            rollbackFor = Exception.class
    )
    @Override
    public void updateOrder(OrderDTO updater) {
        EntityOperations.doUpdate(orderRepository)
                .loadById(updater.getId())
                .update(updater::updateOrder)
                .execute();
    }

    @Transactional(
            rollbackFor = Exception.class
    )
    @Override
    public void validOrder(Long id) {
        EntityOperations.doUpdate(orderRepository)
                .loadById(id)
                .update(Order::valid)
                .execute();
    }

    @Transactional(
            rollbackFor = Exception.class
    )
    @Override
    public void invalidOrder(Long id) {
        EntityOperations.doUpdate(orderRepository)
                .loadById(id)
                .update(Order::invalid)
                .execute();
    }

    @Override
    public OrderVO findById(Long id) {
        Optional<Order> order = orderRepository.findById(id);
        return new OrderVO(order.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
    }

    @Override
    public OrderVO findByOrderNo(String orderNo) {
        Optional<Order> order = orderRepository.findByOrderNo(orderNo);
        return new OrderVO(order.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
    }

    @Override
    public Page<OrderVO> findByPage() {
        final Order dummy1 = new Order();
        dummy1.setId(RandomUtil.randomLong(0L, Long.MAX_VALUE));
        dummy1.setOrderNo(RandomUtil.randomString(16));
        dummy1.valid();
        final Order dummy2 = new Order();
        dummy2.setId(RandomUtil.randomLong(0L, Long.MAX_VALUE));
        dummy2.setOrderNo(RandomUtil.randomString(16));
        dummy2.valid();

        final List<Order> orders = Lists.newArrayList(dummy1, dummy2);
        return new PageImpl<>(orders.stream().map(OrderVO::new)
                .collect(Collectors.toList()));
    }
}
